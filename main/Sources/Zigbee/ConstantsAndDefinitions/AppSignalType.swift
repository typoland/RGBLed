//
//  EspZbAppSignalType.swift
//  
//
//  Created by ≈Åukasz Dziedzic on 25/04/2025.
//


/// Signal types generated by the ESP Zigbee stack.
/// Mirrors `esp_zb_app_signal_type_t` from the ESP Zigbee SDK.
enum AppSignalType: UInt32 {
    case defaultStart                            = 0x00  // Non-BDB commissioning start
    case skipStartup                             = 0x01  // Stack framework ready
    case deviceAnnce                             = 0x02  // Device announced
    case leave                                   = 0x03  // Device left
    case error                                   = 0x04  // Invalid signal
    case deviceFirstStart                        = 0x05  // Factory-new init complete
    case deviceReboot                            = 0x06  // Join/rejoin from config
    case touchlinkNwkStarted                     = 0x07  // Touchlink initiator started network
    case touchlinkNwkJoinedRouter                = 0x08  // Touchlink target joined
    case touchlink                               = 0x09  // Touchlink commissioning result
    case steering                                = 0x0a  // BDB network steering done
    case formation                               = 0x0b  // BDB formation done
    case findingAndBindingTargetFinished         = 0x0c  // F&B target timeout
    case findingAndBindingInitiatorFinished      = 0x0d  // F&B initiator finished
    case touchlinkTarget                         = 0x0e  // Touchlink target commissioning
    case touchlinkNwk                            = 0x0f  // Touchlink target network start
    case touchlinkTargetFinished                 = 0x10  // Touchlink target done
    case deviceAssociated                        = 0x12  // New device associated
    case leaveIndication                         = 0x13  // Child left indication
    case zgpCommissioning                        = 0x15  // ZGP commissioning
    case canSleep                                = 0x16  // Ready for sleep
    case productionConfigReady                   = 0x17  // Production config restored
    case noActiveLinksLeft                       = 0x18  // Routing table expired
    case deviceAuthorized                        = 0x2f  // Device authorized
    case deviceUpdate                            = 0x30  // Join/rejoin/leave info updated
    case panIdConflictDetected                   = 0x31  // PAN ID conflict detected
    case nlmeStatusIndication                    = 0x32  // NWK status indication
    case tcRejoinDone                            = 0x35  // Trust Center rejoin complete
    case permitJoinStatus                        = 0x36  // Permit join updated
    case steeringCancelled                       = 0x37  // Steering cancelled
    case formationCancelled                      = 0x38  // Formation cancelled
    case zgpModeChange                           = 0x3b  // ZGP mode changed
    case deviceUnavailable                       = 0x3c  // Destination unreachable
    case zgpApproveCommissioning                 = 0x3d  // ZGP approve commissioning
    case signalEnd                               = 0x3e  // End of signal enum

    /// Initialize from raw Zigbee signal byte.
//    init?(rawSignal: UInt32) {
//        self.init(rawValue: rawSignal)
//    }

    /// Return associated payload type if known.
    var payloadType: Any.Type? {
        switch self {
        case .deviceAnnce:
            return esp_zb_zdo_signal_device_annce_params_t.self
        case .leave:
            return esp_zb_zdo_signal_leave_params_t.self
        case .deviceAssociated:
            return esp_zb_nwk_signal_device_associated_params_t.self
        case .leaveIndication:
            return esp_zb_zdo_signal_leave_indication_params_t.self
        case .deviceAuthorized:
            return esp_zb_zdo_signal_device_authorized_params_t.self
        case .deviceUpdate:
            return esp_zb_zdo_signal_device_update_params_t.self
        case .nlmeStatusIndication, .tcRejoinDone, .permitJoinStatus:
            return esp_zb_zdo_signal_nwk_status_indication_params_t.self
        case .deviceUnavailable:
            return esp_zb_zdo_device_unavailable_params_t.self
        case .zgpCommissioning:
            return esp_zb_zdo_signal_can_sleep_params_t.self
//        case .zgpApproveCommissioning:
//            return esp_zb_zgp_approve_commissioning_signal_params_t.self
        case .touchlinkNwkStarted:
            return esp_zb_bdb_signal_touchlink_nwk_started_params_t.self
        case .touchlinkNwkJoinedRouter:
            return esp_zb_bdb_signal_touchlink_nwk_joined_router_t.self
        default:
            return nil
        }
    }
    /// Attempt to cast a raw pointer to the expected payload type.
    func decodePayload<T>(from pointer: UnsafeRawPointer?) -> T? {
        guard let pointer = pointer else { return nil }
        guard T.self == payloadType as? T.Type else { return nil }
        return pointer.assumingMemoryBound(to: T.self).pointee
    }
    
    var description: String {
        switch self {
        case .defaultStart: return "Non-BDB commissioning start"
        case .skipStartup: return "Stack framework ready"
        case .deviceAnnce: return "Device announced"
        case .leave: return "Device left"
        case .error: return "Invalid signal"
        case .deviceFirstStart: return "Factory-new init complete"
        case .deviceReboot: return "Join/rejoin from config"
        case .touchlinkNwkStarted: return "Touchlink initiator started network"
        case .touchlinkNwkJoinedRouter: return "Touchlink target joined"
        case .touchlink: return "Touchlink commissioning result"
        case .steering: return "BDB network steering done"
        case .formation: return "BDB formation done"
        case .findingAndBindingTargetFinished: return "F&B target timeout"
        case .findingAndBindingInitiatorFinished: return "F&B initiator finished"
        case .touchlinkTarget: return "Touchlink target commissioning"
        case .touchlinkNwk: return "Touchlink target network start"
        case .touchlinkTargetFinished: return "Touchlink target done"
        case .deviceAssociated: return "New device associated"
        case .leaveIndication: return "Child left indication"
        case .zgpCommissioning: return "ZGP commissioning"
        case .canSleep: return "Ready for sleep"
        case .productionConfigReady: return "Production config restored"
        case .noActiveLinksLeft: return "Routing table expired"
        case .deviceAuthorized: return "Device authorized"
        case .deviceUpdate: return "Join/rejoin/leave info updated"
        case .panIdConflictDetected: return "PAN ID conflict detected"
        case .nlmeStatusIndication: return "NWK status indication"
        case .tcRejoinDone: return "Trust Center rejoin complete"
        case .permitJoinStatus: return "Permit join updated"
        case .steeringCancelled: return "Steering cancelled"
        case .formationCancelled: return "Formation cancelled"
        case .zgpModeChange: return "ZGP mode changed"
        case .deviceUnavailable: return "Destination unreachable"
        case .zgpApproveCommissioning: return "ZGP approve commissioning"
        case .signalEnd: return "End of signal enum"
        }
    }
} // end of AppSignalType
